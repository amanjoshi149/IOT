<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Emergency Map</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <style>
        #map {
            height: 100vh;
            width: 100%;
        }
    </style>
</head>

<body>
    <h1 style="text-align: center; padding: 1em;">Crime Hotspots</h1>
    <div id="map"></div>

    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script>
        // Initialize the map centered on India with an appropriate zoom level
        const map = L.map('map').setView([20.5937, 78.9629], 5);

        // Load and display the tile layer from OpenStreetMap
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map);

        // Array to keep track of current markers
        let markers = [];

        // Function to fetch coordinates from the server and update the map
        async function fetchCoordinates() {
            try {
                const response = await fetch('/api/coordinates');
                
                const coordinates = await response.json();
                console.log(coordinates);
                
                // Remove existing markers from the map
                markers.forEach(marker => map.removeLayer(marker));
                markers = []; // Clear the markers array

                // Add new markers from the fetched coordinates
                coordinates.forEach(coord => {
                    const marker = L.circleMarker([coord.latitude, coord.longitude], {
                        color: 'red',
                        radius: 5,
                        fillColor: 'red',
                        fillOpacity: 1
                    })
                        .addTo(map)
                        .bindPopup('Help, Emergency!');

                    // Add each new marker to the markers array
                    markers.push(marker);
                });
            } catch (error) {
                console.error('Failed to load coordinates:', error);
            }
        }

        // Initial fetch of coordinates
        fetchCoordinates();

        // Fetch coordinates every 10 seconds (10000 milliseconds) without reloading the page
        setInterval(fetchCoordinates, 10000);
    </script>
</body>

</html>